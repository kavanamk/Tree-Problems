
class Node:
 
    # A utility function to create a new node
    def __init__(self, key):
        self.data = key
        self.left = None
        self.right = None
        
 
def sortedArrayToBST(nums):
     mid_index=len(nums)//2
     mid=nums[mid_index]
     root=Node(mid)
     ans=root
     for i in range(mid_index-1,-1,-1):
         #print(nums[i])
         if(nums[i]<root.data):
             root.left=Node(nums[i])
             root=root.left
         else:
             root.right=Node(nums[i])
             root=root.right
     root=ans
     for i in range(mid_index+1,len(nums)):
         if(nums[i]<root.data):
             root.left=Node(nums[i])
             root=root.left
         else:
             root.right=Node(nums[i])
             root=root.right
         
     return ans
 
# Function to  print level order traversal of tree
def printLevelOrder(root):
    h = height(root)
    for i in range(1, h+1):
        print("height "+str(i)+"\n")
        printCurrentLevel(root, i)
        print("\n")
        



def printCurrentLevel(root, level):
    if root is None:
        print("null")
        return 
    if level == 1:
        print(root.data, end=" ")
    elif level > 1:
        printCurrentLevel(root.left, level-1)
        printCurrentLevel(root.right, level-1)
 
 

 
def height(node):
    if node is None:
        return 0
    else:
        # Compute the height of each subtree
        lheight = height(node.left)
        rheight = height(node.right)
 
        # Use the larger one
        if lheight > rheight:
            return lheight+1
        else:
            return rheight+1
    






nums = [-10,-3,0,5,9]
root=sortedArrayToBST(nums)
printLevelOrder(root)

