class Node(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class LinkedList(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def __init__(self):
        self.head = None  # Head of the linked list
        self.prev = None  # To keep track of the previous node in the linked list
        
    def flatten(self, root):
        """
        Flattens a binary tree into a linked list using pre-order traversal.
        :type root: Node
        :rtype: None
        """
        if not root:
            return
        
        # Create a linked list node for the current root
        current_node = LinkedList(root.val)
        
        # If this is the first node, initialize the head of the linked list
        if not self.head:
            self.head = current_node
        else:
            # Link the previous node to the current node
            self.prev.next = current_node
        
        # Update the previous node pointer to the current one
        self.prev = current_node
        
        # Pre-order traversal: first left, then right
        self.flatten(root.left)
        self.flatten(root.right)
        
    def print_linked_list(self):
        # Helper function to print the linked list
        current = self.head
        while current:
            print(current.val, end=" -> ")
            current = current.next
        print("None")

# Example usage
root = Node(3)
root.left = Node(9)
root.right = Node(20)
root.left.left = Node(4)
root.right.left = Node(15)
root.right.right = Node(7)

solution = Solution()
solution.flatten(root)  # Flatten the binary tree into a linked list
solution.print_linked_list()  # Print the flattened linked list
